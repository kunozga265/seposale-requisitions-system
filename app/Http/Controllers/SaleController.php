<?php

namespace App\Http\Controllers;

use App\Http\Resources\ClientResource;
use App\Http\Resources\ProductResource;
use App\Http\Resources\QuotationResource;
use App\Http\Resources\SaleResource;
use App\Http\Resources\UserResource;
use App\Models\Client;
use App\Models\Delivery;
use App\Models\PaymentMethod;
use App\Models\Product;
use App\Models\ProductVariant;
use App\Models\Quotation;
use App\Models\Receipt;
use App\Models\Sale;
use App\Models\Summary;
use App\Models\User;
use Barryvdh\DomPDF\Facade\Pdf;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use Inertia\Inertia;
use Rmunate\Utilities\SpellNumber;

class SaleController extends Controller
{
    public function index(Request $request)
    {
        $sales = Sale::orderBy("date", "desc")->paginate(100);


        if ((new AppController())->isApi($request))
            //API Response
            return response()->json(SaleResource::collection($sales));
        else {
            //Web Response
            return Inertia::render('Sales/Index', [
                'sales' => SaleResource::collection($sales),
            ]);
        }
    }

    public function create(Request $request)
    {
        $products = Product::orderBy("name", 'asc')->get();
        $clients = Client::orderBy("name", 'asc')->get();
        return Inertia::render('Sales/Create', [
            "products" => ProductResource::collection($products),
            "clients" => ClientResource::collection($clients),
        ]);
    }

    public function store(Request $request)
    {
        //get user
        $user = (new AppController())->getAuthUser($request);

        //Validate all the important attributes
        $request->validate([
            'products' => ['required'],
            'total' => ['required'],
        ]);

        //get client info
        if (isset($request->client_id)) {
            $request->validate([
                'client_id' => ['required'],
            ]);

            $client = Client::find($request->client_id);
            if (!is_object($client)) {
                if ((new AppController())->isApi($request)) {
                    //API Response
                    return response()->json(['message' => "Client not found"], 404);
                } else {
                    //Web Response
                    return Redirect::back()->with('error', 'Client not found');
                }
            }
        } else {
            $request->validate([
                'name' => ['required'],
            ]);

            $client = Client::create([
                'name' => $request->name,
                'phone_number' => $request->phoneNumber,
                'email' => $request->email,
                'address' => $request->address,
            ]);
        }

        $sale = Sale::create([
            'code' => (new AppController())->generateUniqueCode(true),
            'code_alt' => $this->getSaleCodeNumber(),
            'status' => 0,
            'client_id' => $client->id,
            'total' => $request->total,
            'balance' => $request->total,
            'date' => isset($request->date) ? $request->date : Carbon::now()->getTimestamp(),
            'editable' => true,
            'location' => $request->location,

            //Generated by
            'user_id' => $user->id,
        ]);

        //attach products
        foreach ($request->products as $product) {
//            $product_model = Product::find($product["id"]);
            $product_variant = ProductVariant::find($product["id"]);
            if (!is_object($product_variant)) {
                $product_model = Product::create([
                    "name" => $product["details"],
                ]);

                $product_variant = ProductVariant::create([
                    "unit" => $product["units"],
                    "quantity" => 1,
                    "cost" => $product["unitCost"],
                    "product_id" => $product_model->id
                ]);
            }

            $summary = Summary::create([
                "product_id" => $product_variant->product->id,
                "product_variant_id" => $product_variant->id,
                "sale_id" => $sale->id,
                "date" => $sale->date,
                "amount" => $product["totalCost"],
                "quantity" => $product["quantity"],
            ]);
        }

//        create delivery note
        Delivery::create([
           "status"=>0,
           "sale_id"=>$sale->id
        ]);

//        //Create Invoice
//        (new InvoiceController())->storeFromSale($sale);

        //Run notifications
//        (new NotificationController())->requestFormNotifications($requestForm, "REQUEST_FORM_PENDING");


//        $report = (new ReportController())->getCurrentReport();
//        $report->requestForms()->attach($requestForm);

        if ((new AppController())->isApi($request))
            //API Response
            return response()->json(new SaleResource($sale), 201);
        else {
            //Web Response
            return Redirect::route('sales.index')->with('success', 'Sale created!');
        }
    }

    public function storeFromQuotation(Request $request, $id)
    {
        //get user
        $user = (new AppController())->getAuthUser($request);

        //find out if the request is valid
        $quotation = Quotation::find($id);

        if (is_object($quotation)) {
            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(new QuotationResource($quotation));
            } else {

                $sale = Sale::create([
                    'code' => (new AppController())->generateUniqueCode(true),
                    'code_alt' => $this->getSaleCodeNumber(),
                    'status' => 0,
                    'client_id' => $quotation->client->id,
                    'total' => $quotation->total,
                    'balance' => $quotation->total,
                    'date' => Carbon::now()->getTimestamp(),
                    'editable' => true,
                    'location' => $quotation->location,

                    //Generated by
                    'user_id' => $user->id,
                ]);

                $products = json_decode($quotation->information);

                //attach products
                foreach ($products as $product) {
//            $product_model = Product::find($product["id"]);
                    $product_variant = ProductVariant::find($product->id);
                    if (!is_object($product_variant)) {
                        $product_model = Product::create([
                            "name" => $product->details,
                        ]);

                        $product_variant = ProductVariant::create([
                            "unit" => $product->units,
                            "quantity" => 1,
                            "cost" => $product->unitCost,
                            "product_id" => $product_model->id
                        ]);
                    }

                    $summary = Summary::create([
                        "product_id" => $product_variant->product->id,
                        "product_variant_id" => $product_variant->id,
                        "sale_id" => $sale->id,
                        "date" => $sale->date,
                        "amount" => $product->totalCost,
                        "quantity" => $product->quantity,
                    ]);
                }

                $quotation->update([
                    "sale_id" => $sale->id
                ]);

                Delivery::create([
                    "status"=>0,
                    "sale_id"=>$sale->id
                ]);

//                //Create Invoice
//                (new InvoiceController())->storeFromSale($sale);


                //Web Response
                return Redirect::route("sales.show",["id" => $sale->id])->with("success","Sale created!");
            }
        } else {
            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(['message' => "Quotation not found"], 404);
            } else {
                //Web Response
                return Redirect::route('dashboard')->with('error', 'Quotation not found');
            }
        }
    }

    public function show(Request $request, $id)
    {
        //find out if the request is valid
        $sale = sale::find($id);
        $payment_methods = PaymentMethod::orderBy("name", "asc")->get();
        $users = User::orderBy("firstName")->get();

        if (is_object($sale)) {
            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(new SaleResource($sale));
            } else {
                //Web Response
                return Inertia::render('Sales/Show', [
                    'sale' => new SaleResource($sale),
                    'paymentMethods' => $payment_methods,
                    'users' => UserResource::collection($users),
                ]);
            }
        } else {
            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(['message' => "sale not found"], 404);
            } else {
                //Web Response
                return Redirect::route('dashboard')->with('error', 'Sale not found');
            }
        }
    }

    private function getCodeReceiptNumber()
    {
        $last = Receipt::orderBy("code", "desc")->first();
        if (is_object($last)) {
            return $last->code + 1;
        } else {
            return 1;
        }
    }

    public function storeReceipt(Request $request, $id)
    {
        //get user
        $user = (new AppController())->getAuthUser($request);

        $sale = sale::find($id);

        if (is_object($sale)) {

            //Validate all the important attributes
            $request->validate([
                'payment_method_id' => ['required'],
                'amount' => ['required'],
            ]);

            $new_balance = $sale->balance - $request->amount;
            if ($new_balance < 0) {
                return Redirect::back()->with("error", "Payment is more than what is required");
            }

            $receipt = Receipt::create([
                'code' => $this->getCodeReceiptNumber(),
                'client_id' => $sale->client->id,
                'sale_id' => $sale->id,
                'payment_method_id' => $request->payment_method_id,
                'amount' => $request->amount,
                'reference' => strtoupper($request->reference),
                'user_id' => $user->id,
                'date' => isset($request->date) ? $request->date : Carbon::now()->getTimestamp(),
            ]);


            $sale->update([
                "balance" => $new_balance,
                "editable" => false,
                "status" => $new_balance == 0 ? 2 : 1
            ]);



            if ((new AppController())->isApi($request))
                //API Response
                return response()->json($receipt, 201);
            else {
                //Web Response
                return Redirect::back()->with('success', 'Receipt generated!');
            }
        } else {
            return Redirect::back()->with('error', 'Sale not found');
        }


    }

    public function edit(Request $request, $id)
    {
        $sale = sale::find($id);

        if (is_object($sale)) {

            $products = Product::orderBy("name", 'asc')->get();
            $clients = Client::orderBy("name", 'asc')->get();
            return Inertia::render('Sales/Edit', [
                'sale' => new SaleResource($sale),
                "products" => ProductResource::collection($products),
                "clients" => ClientResource::collection($clients),
            ]);
        } else {
            return Redirect::back()->with('error', 'Sale not found');
        }
    }

    public function update(Request $request, $id)
    {

        $sale = sale::find($id);

        if (is_object($sale)) {

            //Validate all the important attributes
            $request->validate([
                'products' => ['required'],
                'total' => ['required'],
            ]);

            //get client info
            if (isset($request->client_id)) {
                $request->validate([
                    'client_id' => ['required'],
                ]);

                $client = Client::find($request->client_id);
                if (!is_object($client)) {
                    if ((new AppController())->isApi($request)) {
                        //API Response
                        return response()->json(['message' => "Client not found"], 404);
                    } else {
                        //Web Response
                        return Redirect::back()->with('error', 'Client not found');
                    }
                }
            } else {
                $request->validate([
                    'name' => ['required'],
                ]);

                $client = Client::create([
                    'name' => $request->name,
                    'phone_number' => $request->phoneNumber,
                    'email' => $request->email,
                    'address' => $request->address,
                ]);
            }

            $sale->update([
                'client_id' => $client->id,
                'total' => $request->total,
                'balance' => $request->total,
                'date' => $request->date,
                'location' => $request->location,
            ]);

            //detach products
            foreach ($sale->products as $product) {
                $product->delete();
            }
            //attach products
            foreach ($request->products as $product) {
                $product_variant = ProductVariant::find($product["id"]);
                if (!is_object($product_variant)) {
                    $product_model = Product::create([
                        "name" => $product["details"],
                    ]);

                    $product_variant = ProductVariant::create([
                        "unit" => $product["units"],
                        "quantity" => 1,
                        "cost" => $product["unitCost"],
                        "product_id" => $product_model->id
                    ]);
                }

                $summary = Summary::create([
                    "product_id" => $product_variant->product->id,
                    "product_variant_id" => $product_variant->id,
                    "sale_id" => $sale->id,
                    "date" => $sale->date,
                    "amount" => $product["totalCost"],
                    "quantity" => $product["quantity"],
                ]);
            }

            //Update Invoice
            if($sale->invoice) {
                (new InvoiceController())->updateFromSale($sale);
            }

            //Run notifications
//        (new NotificationController())->requestFormNotifications($requestForm, "REQUEST_FORM_PENDING");


//        $report = (new ReportController())->getCurrentReport();
//        $report->requestForms()->attach($requestForm);

            if ((new AppController())->isApi($request))
                //API Response
                return response()->json(new SaleResource($sale), 201);
            else {
                //Web Response
                return Redirect::route('sales.index')->with('success', 'Sale updated!');
            }
        } else {
            return Redirect::back()->with('error', 'Sale not found');
        }
    }
    public function updateDelivery(Request $request, $id)
    {

        $sale = sale::find($id);

        //get user
        $user = (new AppController())->getAuthUser($request);


        if (is_object($sale)) {

            if($sale->delivery->status == 0){
                $sale->delivery->update([
                    "status" => 1,
                    "date_initiated" => isset($request->date) ? $request->date : Carbon::now()->getTimestamp(),
                    "initiated_by" => isset($request->user_id) ? $request->user_id : $user->id
                ]);
            }else{
                $sale->delivery->update([
                    "status" => 2,
                    "date_delivered" => isset($request->date) ? $request->date : Carbon::now()->getTimestamp(),
                    "delivered_by" => isset($request->user_id) ? $request->user_id : $user->id
                ]);
            }

            if ((new AppController())->isApi($request))
                //API Response
                return response()->json(new SaleResource($sale), 201);
            else {
                //Web Response
                return Redirect::back()->with('success', 'Delivery updated!');
            }
        } else {
            return Redirect::back()->with('error', 'Sale not found');
        }
    }



    public function destroy(Request $request, $id)
    {
        //find out if the request is valid
        $sale = sale::find($id);

        if (is_object($sale)) {

            //detach products
            foreach ($sale->products as $product) {
                $product->delete();
            }

            if (is_object($sale->quotation)){
                $sale->quotation->update([
                    "sale_id" => null
                ]);
            }

            $sale->delete();

            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(['message' => 'Sale has been deleted']);
            } else {
                //Web Response
                return Redirect::route('sales.index')->with('success', 'Sale has been deleted');
            }
        } else {
            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(['message' => "sale not found"], 404);
            } else {
                //Web Response
                return Redirect::back()->with('error', 'Sale not found');
            }
        }
    }

    public function print(Request $request,$id)
    {
        //find out if the request is valid
        $sale=Sale::find($id);

        if(is_object($sale)){

            /*
                        $pdf=App::make('dompdf.wrapper');
                        $pdf->loadHTML('request');
                        return $pdf->stream('Request Form');*/

            $filename="SALE#LL".(new AppController())->getZeroedNumber($sale->code_alt)." - ".$sale->client->name."-".date('Ymd',$sale->date);

            $now_d= \Illuminate\Support\Carbon::createFromTimestamp($sale->date,'Africa/Lusaka')->format('F j, Y');
            $now_t=Carbon::createFromTimestamp($sale->date,'Africa/Lusaka')->format('H:i');

            $total_in_words = SpellNumber::value($sale->total)
                ->locale('en')
                ->currency('Kwacha')
                ->fraction('Tambala')
                ->toMoney();

            $total_in_words = str_replace(" of "," ",$total_in_words);

            $pdf = PDF::loadView('sale', [
                'code'              => "LL".(new AppController())->getZeroedNumber($sale->code_alt),
                'date'              => $now_d,
                'time'              => $now_t,
                'sale'              => $sale,
                'total_in_words'    => $total_in_words
            ]);
            return $pdf->download("$filename.pdf");

        }else {
            if ((new AppController())->isApi($request)) {
                //API Response
                return response()->json(['message' => "Sale not found"], 404);
            }else{
                //Web Response
                return Redirect::route('dashboard')->with('error','Sale not found');
            }
        }
    }

    public function getSaleCodeNumber()
    {
        $last = Sale::orderBy("code_alt","desc")->first();
        if (is_object($last)){
            return intval($last->code_alt) + 1;
        }else{
            return 1;
        }
    }
}
